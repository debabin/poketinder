/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './../../src/routes/__root'
import { Route as LayoutImport } from './../../src/routes/_layout'
import { Route as LayoutStatsLayoutImport } from './../../src/routes/_layout/stats/_layout'
import { Route as LayoutStatsLayoutTopIndexImport } from './../../src/routes/_layout/stats/_layout/top/index'
import { Route as LayoutStatsLayoutListIndexImport } from './../../src/routes/_layout/stats/_layout/list/index'

// Create Virtual Routes

const LayoutStatsImport = createFileRoute('/_layout/stats')()
const LayoutIndexLazyImport = createFileRoute('/_layout/')()

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutStatsRoute = LayoutStatsImport.update({
  id: '/stats',
  path: '/stats',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutIndexLazyRoute = LayoutIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() =>
  import('./../../src/routes/_layout/index.lazy').then((d) => d.Route),
)

const LayoutStatsLayoutRoute = LayoutStatsLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => LayoutStatsRoute,
} as any)

const LayoutStatsLayoutTopIndexRoute = LayoutStatsLayoutTopIndexImport.update({
  id: '/top/',
  path: '/top/',
  getParentRoute: () => LayoutStatsLayoutRoute,
} as any).lazy(() =>
  import('./../../src/routes/_layout/stats/_layout/top/index.lazy').then(
    (d) => d.Route,
  ),
)

const LayoutStatsLayoutListIndexRoute = LayoutStatsLayoutListIndexImport.update(
  {
    id: '/list/',
    path: '/list/',
    getParentRoute: () => LayoutStatsLayoutRoute,
  } as any,
).lazy(() =>
  import('./../../src/routes/_layout/stats/_layout/list/index.lazy').then(
    (d) => d.Route,
  ),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexLazyImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/stats': {
      id: '/_layout/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof LayoutStatsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/stats/_layout': {
      id: '/_layout/stats/_layout'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof LayoutStatsLayoutImport
      parentRoute: typeof LayoutStatsRoute
    }
    '/_layout/stats/_layout/list/': {
      id: '/_layout/stats/_layout/list/'
      path: '/list'
      fullPath: '/stats/list'
      preLoaderRoute: typeof LayoutStatsLayoutListIndexImport
      parentRoute: typeof LayoutStatsLayoutImport
    }
    '/_layout/stats/_layout/top/': {
      id: '/_layout/stats/_layout/top/'
      path: '/top'
      fullPath: '/stats/top'
      preLoaderRoute: typeof LayoutStatsLayoutTopIndexImport
      parentRoute: typeof LayoutStatsLayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutStatsLayoutRouteChildren {
  LayoutStatsLayoutListIndexRoute: typeof LayoutStatsLayoutListIndexRoute
  LayoutStatsLayoutTopIndexRoute: typeof LayoutStatsLayoutTopIndexRoute
}

const LayoutStatsLayoutRouteChildren: LayoutStatsLayoutRouteChildren = {
  LayoutStatsLayoutListIndexRoute: LayoutStatsLayoutListIndexRoute,
  LayoutStatsLayoutTopIndexRoute: LayoutStatsLayoutTopIndexRoute,
}

const LayoutStatsLayoutRouteWithChildren =
  LayoutStatsLayoutRoute._addFileChildren(LayoutStatsLayoutRouteChildren)

interface LayoutStatsRouteChildren {
  LayoutStatsLayoutRoute: typeof LayoutStatsLayoutRouteWithChildren
}

const LayoutStatsRouteChildren: LayoutStatsRouteChildren = {
  LayoutStatsLayoutRoute: LayoutStatsLayoutRouteWithChildren,
}

const LayoutStatsRouteWithChildren = LayoutStatsRoute._addFileChildren(
  LayoutStatsRouteChildren,
)

interface LayoutRouteChildren {
  LayoutIndexLazyRoute: typeof LayoutIndexLazyRoute
  LayoutStatsRoute: typeof LayoutStatsRouteWithChildren
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexLazyRoute: LayoutIndexLazyRoute,
  LayoutStatsRoute: LayoutStatsRouteWithChildren,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/': typeof LayoutIndexLazyRoute
  '/stats': typeof LayoutStatsLayoutRouteWithChildren
  '/stats/list': typeof LayoutStatsLayoutListIndexRoute
  '/stats/top': typeof LayoutStatsLayoutTopIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof LayoutIndexLazyRoute
  '/stats': typeof LayoutStatsLayoutRouteWithChildren
  '/stats/list': typeof LayoutStatsLayoutListIndexRoute
  '/stats/top': typeof LayoutStatsLayoutTopIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/': typeof LayoutIndexLazyRoute
  '/_layout/stats': typeof LayoutStatsRouteWithChildren
  '/_layout/stats/_layout': typeof LayoutStatsLayoutRouteWithChildren
  '/_layout/stats/_layout/list/': typeof LayoutStatsLayoutListIndexRoute
  '/_layout/stats/_layout/top/': typeof LayoutStatsLayoutTopIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/stats' | '/stats/list' | '/stats/top'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/stats' | '/stats/list' | '/stats/top'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/'
    | '/_layout/stats'
    | '/_layout/stats/_layout'
    | '/_layout/stats/_layout/list/'
    | '/_layout/stats/_layout/top/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/",
        "/_layout/stats"
      ]
    },
    "/_layout/": {
      "filePath": "_layout/index.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/stats": {
      "filePath": "_layout/stats",
      "parent": "/_layout",
      "children": [
        "/_layout/stats/_layout"
      ]
    },
    "/_layout/stats/_layout": {
      "filePath": "_layout/stats/_layout.tsx",
      "parent": "/_layout/stats",
      "children": [
        "/_layout/stats/_layout/list/",
        "/_layout/stats/_layout/top/"
      ]
    },
    "/_layout/stats/_layout/list/": {
      "filePath": "_layout/stats/_layout/list/index.tsx",
      "parent": "/_layout/stats/_layout"
    },
    "/_layout/stats/_layout/top/": {
      "filePath": "_layout/stats/_layout/top/index.tsx",
      "parent": "/_layout/stats/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
